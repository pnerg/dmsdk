package org.dmonix.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * This class is wrapped around a <code>java.sql.PreparedStatement</code> object in order to offer additional functionality not included by the Java JDBC API.
 * Among other things this class allows the developer to create a string representation with all the bind variables set for the wrapped statement.
 * <p>
 * Copyright: Copyright (c) 2006
 * </p>
 * <p>
 * Company: dmonix.org
 * </p>
 * 
 * @author Peter Nerg
 * @since 2.0
 */
public interface LoggablePreparedStatement {

    /**
     * Commit all the transactions for this statement.
     * 
     * @param stmt
     *            The statement
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public void commit() throws SQLException;

    /**
     * Rollback all the transactions for this statement.
     * 
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public void rollback() throws SQLException;

    /**
     * Close the statement.
     */
    public void close();

    /**
     * Executes the SQL statement in this <code>LoggablePreparedStatementImpl</code> object, which may be any kind of SQL statement. Some prepared statements
     * return multiple results; the <code>execute</code> method handles these complex statements as well as the simpler form of statements handled by the
     * methods <code>executeQuery</code> and <code>executeUpdate</code>.
     * <P>
     * The <code>execute</code> method returns a <code>boolean</code> to indicate the form of the first result. You must call either the method
     * <code>getResultSet</code> or <code>getUpdateCount</code> to retrieve the result; you must call <code>getMoreResults</code> to move to any subsequent
     * result(s).
     * 
     * @return <code>true</code> if the first result is a <code>ResultSet</code> object; <code>false</code> if the first result is an update count or there is
     *         no result
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public boolean execute() throws SQLException;

    /**
     * Executes the SQL query in this <code>LoggablePreparedStatementImpl</code> object and returns the <code>ResultSet</code> object generated by the query.
     * 
     * @return a <code>ResultSet</code> object that contains the data produced by the query; never <code>null</code>
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public ResultSet executeQuery() throws SQLException;

    /**
     * Sets the designated parameter to the given Java <code>int</code> value. The driver converts this to an SQL <code>INTEGER</code> value when it sends it to
     * the database.
     * 
     * @param parameterIndex
     *            the first parameter is 1, the second is 2, ...
     * @param value
     *            the parameter value
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public void setInt(int parameterIndex, int value) throws SQLException;

    /**
     * Sets the designated parameter to the given Java <code>long</code> value. The driver converts this to an SQL <code>BIGINT</code> value when it sends it to
     * the database.
     * 
     * @param parameterIndex
     *            the first parameter is 1, the second is 2, ...
     * @param value
     *            the parameter value
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public void setLong(int parameterIndex, long value) throws SQLException;

    /**
     * Sets the designated parameter to the given Java <code>String</code> value. The driver converts this to an SQL <code>VARCHAR</code> or
     * <code>LONGVARCHAR</code> value (depending on the argument's size relative to the driver's limits on <code>VARCHAR</code> values) when it sends it to the
     * database.
     * 
     * @param parameterIndex
     *            the first parameter is 1, the second is 2, ...
     * @param value
     *            the parameter value
     * @throws IllegalStateException
     *             If the connection has been closed
     * @throws SQLException
     *             if a database access error occurs or this
     */
    public void setString(int parameterIndex, String value) throws SQLException;

    /**
     * Returns a string representation of the SQL statement for this object. The method will attempt to replace all the bind variables with their correct value
     * before returning the SQL statement.
     */
    public String toString();

}
